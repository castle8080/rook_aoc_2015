
import _ from 'lodash';
import Problem from './problem';

//
// To continue, please consult the code grid in the manual.  Enter the code at row 2947, column 3029.

const CONSOLE_REGEX = /row (\d+), column (\d+)\./;

function parse_console_request(input: string) {
    for (let line of input.split("\n")) {
        const m = line.match(CONSOLE_REGEX);
        if (m) {
            return [parseInt(m[1]), parseInt(m[2])];
        }
    }
    throw Error(`Could not find message in input: ${input}`);
}

function row_col_to_n(row: number, col: number): number {
    let total = 0;

    for (let i = 0; i < row; i++) {
        total += i;
    }
    total++;

    for (let i = 1; i < col; i++) {
        total += i + row;
    }

    return total;
}

/*
 The first code is 20151125. After that, each code is generated by taking the previous one,
 multiplying it by 252533, and then keeping the remainder from dividing that value by 33554393.
 */
function next_code(n: number) {
    return (n * 252533) % 33554393;
}

const INITIAL_CODE = 20151125;

async function part1(input: string): Promise<number> {
    const [row, column] = parse_console_request(input);
    const code_n = row_col_to_n(row, column);

    let cur = INITIAL_CODE;
    for (let i = 2; i <= code_n; i++) {
        cur = next_code(cur);
    }

    return cur;
}

async function part2(input: string): Promise<string> {
    return "Done!";
}

function Problem25() {
    return (
        <Problem
            day = { 25 }
            part1 = { part1 }
            part2 = { part2 }
            inputs = {[
                "input_25.txt",
            ]}
            problem_link = "https://adventofcode.com/2015/day/25"
        />
    )
}

export default Problem25;